package Behörighet2;


import StartPaket.Validering;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import oru.inf.InfDB;
import oru.inf.InfException;

/*
 * Klass för att registrera och avregistrera elev på kurs
*

/**
 *
 * @author Admin
 */
public class RegistreraochAvegistreraElevPåKurs extends javax.swing.JFrame {

    private InfDB idb;

    /**
     * Creates new form RegistreraElevPåKurs
     */
    public RegistreraochAvegistreraElevPåKurs(InfDB idb) {
        initComponents();
        this.idb = idb;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        fornamn = new javax.swing.JTextField();
        efternamn = new javax.swing.JTextField();
        kurs = new javax.swing.JTextField();
        registrera = new javax.swing.JButton();
        tabort = new javax.swing.JToggleButton();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Registrera  alternativt ta bort Elev från Kurs");

        jLabel2.setText("Elev Förnamn");

        jLabel3.setText("Elev Efternamn");

        jLabel4.setText("Kurs Namn");

        registrera.setText("Registrera");
        registrera.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registreraActionPerformed(evt);
            }
        });

        tabort.setForeground(new java.awt.Color(255, 51, 51));
        tabort.setText("Ta bort");
        tabort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tabortActionPerformed(evt);
            }
        });

        jLabel6.setText("<- Tillbaka");
        jLabel6.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel6MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(7, 7, 7)
                                .addComponent(registrera, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addComponent(kurs, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(81, 81, 81)
                                .addComponent(tabort, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(fornamn, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(efternamn, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(60, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fornamn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(efternamn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(kurs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(tabort, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                    .addComponent(registrera, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tabortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tabortActionPerformed
        //// Ger felmeddelande vid tomma inmatningsrutor.
        if (Validering.textFaltHarVarde(kurs)) {
            if (Validering.textNamnHarVarde(fornamn, efternamn)) {

                try {
                    //Deklerar variabler och använder en toUpperCase metod på inmatningen
                    String enamn = Validering.storBokstav(efternamn.getText());

                    String fnamn = Validering.storBokstav(fornamn.getText());

                    String kursen = Validering.storBokstav(kurs.getText());

                    String id;

                    id = idb.fetchSingle("SELECT ELEV_ID FROM ELEV where fornamn=" + "'" + fnamn + "'" + "and efternamn=" + "'" + enamn + "'");
                    //Om inget id hittas, skriv ut felmeddelande
                    if (id == null) {
                        JOptionPane.showMessageDialog(null, " Eleven finns inte, kontrollera inmatningen");
                    } else { // Hämta kurs id för inmatat kursnamn
                        String kid = idb.fetchSingle("select kurs_id from kurs where kursnamn=" + "'" + kursen + "'");
                        //Kontrollerar så att idet finns, om inte skickar felmeddelande
                        if (kid == null) {
                            JOptionPane.showMessageDialog(null, " Kursen finns inte, kontrollera inmatningen");
                        } else { //Kollar att eleven  är  registreard på kursen med hjälpa av elev id oc kurs id
                            String a = idb.fetchSingle("SELECT KURS_ID FROM REGISTRERAD_PA where ELEV_ID=" + "'" + id + "'" + "and KURS_ID=" + "'" + kid + "'");

                            if (null == a) {
                                JOptionPane.showMessageDialog(null, "Eleven är inte registrerad kursen");
                            } else {

                                // Ta bort eleven från kursen, skriv ut bekräftelse
                                idb.delete("DELETE from REGISTRERAD_PA where ELEV_ID=" + "'" + id + "'");
                                {
                                    JOptionPane.showMessageDialog(null, "  Eleven är nu borttagen från kursen");
                                }
                            }
                        }
                    }

                } catch (InfException ex) {
                    Logger.getLogger(RegistreraochAvegistreraElevPåKurs.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        }
    }//GEN-LAST:event_tabortActionPerformed

    private void registreraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registreraActionPerformed
        //// Ger felmeddelande vid tomma inmatningsrutor.
        if (Validering.textFaltHarVarde(kurs)) {
            if (Validering.textNamnHarVarde(fornamn, efternamn)) {

            }
            //Deklerar variabler och använder en toUpperCase metod på inmatningen 
            String enamn = Validering.storBokstav(efternamn.getText());

            String fnamn = Validering.storBokstav(fornamn.getText());

            String kursen = Validering.storBokstav(kurs.getText());

            //Tar fram elevens id med hjälp av inmatat för och efternamn
            String id;
            try {
                id = idb.fetchSingle("SELECT ELEV_ID FROM ELEV where fornamn=" + "'" + fnamn + "'" + "and efternamn=" + "'" + enamn + "'");
                //Om inget id hittas, skriv ut felmeddelande 
                if (id == null) {
                    JOptionPane.showMessageDialog(null, " Eleven finns inte, kontrollera inmatningen");
                } else { // Hämta kurs id för inmatat kursnamn
                    String kid = idb.fetchSingle("select kurs_id from kurs where kursnamn=" + "'" + kursen + "'");
                    //Kontrollerar så att idet finns, om inte skickar felmeddelande
                    if (kid == null) {
                        JOptionPane.showMessageDialog(null, " Kursen finns inte, kontrollera inmatningen");
                    } else { //Kollar o eleven redan är  reggistreard på kursen med hjälpa av elev id oc kurs id
                        String a = idb.fetchSingle("SELECT KURS_ID FROM REGISTRERAD_PA where ELEV_ID=" + "'" + id + "'" + "and KURS_ID=" + "'" + kid + "'");
                        //Kollar att eleven inte redan är registrerad på kursen.
                        if (!(null == a)) {
                            JOptionPane.showMessageDialog(null, "Eleven är redan registrerad på kursen");
                        } // Registrerar elveven på kursen
                        else {
                            idb.insert("insert into REGISTRERAD_PA values" + "(" + "'" + id + "'" + "," + "'" + kid + "')");
                            {
                                //Meddelar att registrering är genomförd
                                JOptionPane.showMessageDialog(null, "Eleven är nu registrerad på kursen");
                            }
                        }
                    }

                }
            } catch (InfException ex) {
                Logger.getLogger(RegistreraochAvegistreraElevPåKurs.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, "Något gick fel!");
            }
        }


    }//GEN-LAST:event_registreraActionPerformed

    private void jLabel6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel6MouseClicked
        //Går tillbaka till meny
        dispose();
    }//GEN-LAST:event_jLabel6MouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField efternamn;
    private javax.swing.JTextField fornamn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JTextField kurs;
    private javax.swing.JButton registrera;
    private javax.swing.JToggleButton tabort;
    // End of variables declaration//GEN-END:variables
}
