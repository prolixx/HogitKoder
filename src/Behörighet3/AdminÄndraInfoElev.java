package Behörighet3;

/*
 * Klass för att ändra information om elev
*  och ta bort elev samt gör till prefekt
 */



import StartPaket.Validering;
import java.awt.HeadlessException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import oru.inf.InfDB;
import oru.inf.InfException;

/**
 *
 * @author Dator
 */
public class AdminÄndraInfoElev extends javax.swing.JFrame {
    private final InfDB idb;
    
    
    
    
    /**
     * Creates new form RegNyElev
     */
    public AdminÄndraInfoElev(InfDB idb) {
        initComponents();
        this.idb=idb;

    }
    // get metod för att hämta id till övriga metoder

    public String getID() throws InfException {
        //deklarerar varibler 
        String elevFnamn = fornamn.getText();
        String elevEnamn = efternamn.getText();
        // hämtar id från databasen efter inmatade variablerna
        String id = idb.fetchSingle("SELECT ELEV_ID FROM ELEV WHERE FORNAMN=" + "'" + elevFnamn + "'"
                + "AND EFTERNAMN =" + "'" + elevEnamn + "'");
        //retunerar id
        return id;

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        andraFornamn = new javax.swing.JTextField();
        andraEfternamn = new javax.swing.JTextField();
        andraSovsal = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        andraKnapp1 = new javax.swing.JButton();
        andraKnapp2 = new javax.swing.JButton();
        andraKnapp3 = new javax.swing.JButton();
        fornamn = new javax.swing.JTextField();
        efternamn = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        tabortElevKnapp = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        elevhem = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Nytt Förnamn");

        jLabel2.setText("Nytt Efternamn");

        jLabel4.setText("Byt Sovsal");

        andraKnapp1.setText("Ändra");
        andraKnapp1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                andraKnapp1ActionPerformed(evt);
            }
        });

        andraKnapp2.setText("Ändra");
        andraKnapp2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                andraKnapp2ActionPerformed(evt);
            }
        });

        andraKnapp3.setText("Ändra");
        andraKnapp3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                andraKnapp3ActionPerformed(evt);
            }
        });

        jLabel6.setText("Förnamn:");

        jLabel7.setText("Efternamn:");

        jLabel8.setText("Vilken elev vill du ändra?");

        jLabel9.setText("Fyll informationen du vill ändra.");

        jLabel3.setText("<- Tillbaka");
        jLabel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel3MouseClicked(evt);
            }
        });

        tabortElevKnapp.setForeground(new java.awt.Color(255, 0, 0));
        tabortElevKnapp.setText("Tabort elev");
        tabortElevKnapp.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        tabortElevKnapp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tabortElevKnappActionPerformed(evt);
            }
        });

        jButton1.setText("Ändra");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel5.setText("Elevhems Namn");

        jLabel10.setText("Gör Till Prefekt");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel8)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(fornamn, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel7)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(efternamn, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel5)
                                    .addGap(26, 26, 26)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(andraEfternamn, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jButton1))
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(128, 128, 128)
                                            .addComponent(tabortElevKnapp, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(47, 47, 47)
                                            .addComponent(andraSovsal, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel2)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addGap(2, 2, 2)
                                                    .addComponent(jLabel1)))
                                            .addGap(27, 27, 27)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(elevhem, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(andraFornamn, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(andraKnapp2)
                                        .addComponent(andraKnapp1)
                                        .addComponent(andraKnapp3)))))))
                .addContainerGap(43, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fornamn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(efternamn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(31, 31, 31)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(andraFornamn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(andraKnapp1)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(andraKnapp2)
                    .addComponent(jLabel2)
                    .addComponent(elevhem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(andraSovsal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(andraKnapp3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(andraEfternamn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(tabortElevKnapp, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void andraKnapp1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_andraKnapp1ActionPerformed
        // validerar inmatningsrutor
        if (Validering.textNamnHarVarde(fornamn, efternamn) && Validering.textFaltHarVarde(andraSovsal)) {
            //Deklarerar variabel samt använder toUppercase metod
            String fnamn = Validering.storBokstav(andraFornamn.getText());

            try {
                //kollar om eleven finns, annars skickar ut felmeddelande
                if (getID() == null) {
                    JOptionPane.showMessageDialog(null, "Kunde inte hitta elev");
                } else {
                    //uppdaterar elevens förnamn
                    idb.update("UPDATE elev SET FORNAMN=" + "'" + fnamn + "'" + "WHERE ELEV_ID=" + "'" + getID() + "'");
                    JOptionPane.showMessageDialog(null, "Elevens namn är uppdaterat");
                }
            } catch (InfException ex) {
                Logger.getLogger(AdminÄndraInfoElev.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, "Något gick fel! Kontrollera inmatningen");
            }

        }
    }//GEN-LAST:event_andraKnapp1ActionPerformed

    private void andraKnapp2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_andraKnapp2ActionPerformed
            // validerar inmatningsrutor
        if (Validering.textNamnHarVarde(fornamn, efternamn) && Validering.textFaltHarVarde(andraSovsal)) {
            //Deklarerar variabel samt använder toUpperCase metod.
            String nyttEfternamn = Validering.storBokstav(andraEfternamn.getText());
            try {
                //Kollar om elev finns annars skickar ut felmeddelande
                if (getID() == null) {
                    JOptionPane.showMessageDialog(null, "Kunde inte hitta elev!");
                } else {
                     //uppdaterar elevens efternamn
                    idb.update("UPDATE elev SET EFTERNAMN=" + "'" + nyttEfternamn + "'" + "WHERE ELEV_ID=" + "'" + getID() + "'");
                    JOptionPane.showMessageDialog(null, "Elevens namn är nu uppdaterat!");
                }
            } catch (InfException ex) {
                Logger.getLogger(AdminÄndraInfoElev.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, "Något gick fel! Kontrollera inmatningen");
            }
        }

    }//GEN-LAST:event_andraKnapp2ActionPerformed

    private void andraKnapp3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_andraKnapp3ActionPerformed
        // Validerar inmatningsrutorna
        if (Validering.textNamnHarVarde(fornamn, efternamn) && Validering.isHeltal(andraSovsal)) {
            //deklarerar variabel
            String nySovsal = andraSovsal.getText();
            try {
                //Kollar om elev finns annars skickar felmeddelande
                if (getID() == null) {
                    JOptionPane.showMessageDialog(null, "Kunde inte hitta elev");
                } else {
                    //Uppdaterar sovsal
                    idb.update("UPDATE elev SET SOVSAL=" + "'" + nySovsal + "'" + "WHERE ELEV_ID=" + "'" + getID() + "'");
                    JOptionPane.showMessageDialog(null, "Elevens sovsal är uppdaterat");
                }
            } catch (InfException ex) {
                Logger.getLogger(AdminÄndraInfoElev.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, "Något gick fel! Kontrollera inmatningen");
            }
        }

    }//GEN-LAST:event_andraKnapp3ActionPerformed

    private void jLabel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel3MouseClicked
        //Går tillbaka till meny
        dispose();
    }//GEN-LAST:event_jLabel3MouseClicked

    private void tabortElevKnappActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tabortElevKnappActionPerformed
        //Kontrollerar att inmatningsrutorna har värden
        if (Validering.textNamnHarVarde(fornamn, efternamn)) {
            try {

                boolean ok = true;

                //Om inget id hittas, skriv ut felmeddelande
                if (getID() == null) {
                    JOptionPane.showMessageDialog(null, " Eleven finns inte");
                } else {
                    //Om id hittas, kolla om eleven har betyg i en eler flera kurser
                    String a = idb.fetchSingle("Select ELEV_ID from HAR_BETYG_I where ELEV_ID=" + "'" + getID() + "'");
                    if (!(null == a)) {
                        ok = false;
                    }
                    {

                        // Om eleven ha registrerade beyg, ta bort dessa ut tabellen
                        idb.delete("delete from HAR_BETYG_I WHERE ELEV_ID=" + "'" + getID() + "'");
                        ok = true;
                    }

                    if (ok = true) {
                        // Kolla om eleven är registrerad på en eller flera kurser
                        String b = idb.fetchSingle("Select ELEV_ID from REGISTRERAD_PA where ELEV_ID=" + "'" + getID() + "'");
                        if (!(null == b)) {
                            ok = false;
                        }
                        {

                            // Om eleven är registrerad på kurser, ta bort dessa rader ut tabellen
                            idb.delete("delete from REGISTRERAD_PA WHERE ELEV_ID=" + "'" + getID() + "'");
                            ok = true;
                        }

                        if (ok = true) {
                            // Kolla om elevn är prefket på något elvehem
                            String c = idb.fetchSingle("Select PREFEKT from ELEVHEM where PREFEKT=" + "'" + getID() + "'");
                            //Om eleven är prefekt, skriv ut felmeddelande, borttag ej möjligt
                            if (!(null == c)) {
                                JOptionPane.showMessageDialog(null, " Eleven är prefekt välj ny prefekt innan borttag");
                            }

                            if (c == null) {
                                //Ta bort eleven, skriv ut att borttaget är genomfört
                                idb.delete("DELETE from ELEV where ELEV_ID=" + "'" + getID() + "'");
                                {
                                    JOptionPane.showMessageDialog(null, "  Eleven är nu borttagen");
                                }
                            }
                        }
                    }
                }

            } catch (InfException ex) {
                Logger.getLogger(AdminÄndraInfoElev.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, "Något gick fel! Kontrollera inmatningen");
            }
        }

    }//GEN-LAST:event_tabortElevKnappActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // Ger felmeddelande vid tomma inmatningsrutor
        if (Validering.textFaltHarVarde(elevhem)) {
            if (Validering.textNamnHarVarde(fornamn, efternamn)) {
                try {
                    //Deklarerar variabler
                    String hem = Validering.storBokstav(elevhem.getText());
                    String fnamn = Validering.storBokstav(fornamn.getText());
                    String enamn = Validering.storBokstav(efternamn.getText());

                    //Skapa en ArrayLista med alla elevhems namn
                    ArrayList<String> h = idb.fetchColumn("SELECT ELEVHEMSNAMN from ELEVHEM");
                    //Kontrollerar att inmatat namn finns i listan,  om inte skickar felmeddelande
                    if (!(h.contains(hem))) {
                        JOptionPane.showMessageDialog(null, "Elevhemmet finns inte, kontrollera stavningen");
                    } else {
                        // Hämta Lärar id för inmatat för och efternamn
                        String id = idb.fetchSingle("SELECT ELEV_ID FROM ELEV where fornamn=" + "'" + fnamn + "'" + "and efternamn=" + "'" + enamn + "'");
                        //Kontrollerar så att idet finns, om inte skickar felmeddelande
                        if (id == null) {
                            JOptionPane.showMessageDialog(null, " Eleven finns inte");
                        } else {

                            //Kollar om läraren redan är föreståndare och skikcar i så fall felmeddelande
                            String finns = idb.fetchSingle("SELECT PREFEKT FROM ELEVHEM where PREFEKT =" + id);
                            if (!(finns == null)) {
                                JOptionPane.showMessageDialog(null, " Eleven är redan prefekt för ett elevhem");
                            } else {
                                //Om idet finns sätts detta som  prefekt för angivet elevhem,
                                idb.update("UPDATE ELEVHEM SET PREFEKT=" + id + "where ELEVHEMSNAMN=" + "'" + hem + "'");
                                //Meddelar att uppdateringen är gjord
                                {
                                    JOptionPane.showMessageDialog(null, hem + "s föreståndare är nu updaterad");
                                }
                            }
                        }
                    }

                } catch (HeadlessException | NumberFormatException | InfException e) {
                    JOptionPane.showMessageDialog(null, "Något gick fel! Kontrollera inmatningen");
                    System.out.println("Internt felmeddelande" + e.getMessage());
                }
            }
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField andraEfternamn;
    private javax.swing.JTextField andraFornamn;
    private javax.swing.JButton andraKnapp1;
    private javax.swing.JButton andraKnapp2;
    private javax.swing.JButton andraKnapp3;
    private javax.swing.JTextField andraSovsal;
    private javax.swing.JTextField efternamn;
    private javax.swing.JTextField elevhem;
    private javax.swing.JTextField fornamn;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JButton tabortElevKnapp;
    // End of variables declaration//GEN-END:variables
}
